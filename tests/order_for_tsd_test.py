import unittest
from unittest.mock import Mock
import requests
from typing import List, Dict, Any, Tuple
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
BASE = "https://example.com"
WAREHOUSE_ID = "123"

# –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ perform_introduction_from_order_tsd
# (—è –æ–ø—É—Å–∫–∞—é –µ–≥–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –¥–æ–±–∞–≤—å –≤–µ—Å—å def –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)

def perform_introduction_from_order_tsd(
    session: requests.Session,
    codes_order_id: str,
    positions_data: List[Dict[str, str]],
    production_patch: Dict[str, Any],
) -> Tuple[bool, Dict[str, Any]]:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç —á–µ—Ä–µ–∑ –¢–°–î.
    """
    result: Dict[str, Any] = {"errors": []}
    
    try:
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –¢–°–î –¥–ª—è –∑–∞–∫–∞–∑–∞ {codes_order_id}")
        
        # 1. –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç
        url_create = f"{BASE}/api/v1/codes-introduction?warehouseId={WAREHOUSE_ID}"
        logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {url_create}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        r_create = session.post(url_create, json={}, timeout=30)
        logger.info(f"üì° –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è: {r_create.status_code}")
        logger.info(f"üì° –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è: {r_create.text}")
        
        r_create.raise_for_status()
        document_id = r_create.text.strip().strip('"')
        result["introduction_id"] = document_id
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {document_id}")

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ production
        url_production = f"{BASE}/api/v1/codes-introduction/{document_id}/production"
        logger.info(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º production: {url_production}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π payload –¥–ª—è production
        production_payload = {
            "documentNumber": production_patch["documentNumber"],
            "producerInn": "",
            "productionDate": production_patch["productionDate"] + "T00:00:00.000+03:00",
            "productionType": "ownProduction",
            "warehouseId": WAREHOUSE_ID,
            "expirationType": "milkMoreThan72",
            "expirationDate": production_patch["expirationDate"] + "T00:00:00.000+03:00",
            "containsUtilisationReport": True,
            "usageType": "verified",
            "cisType": "unit",
            "fillingMethod": "tsd",
            "batchNumber": production_patch["batchNumber"],
            "isAutocompletePositionsDataNeeded": True,
            "productsHasSameDates": True,
            "productGroup": "wheelChairs"
        }
        
        logger.info(f"üì¶ Production payload: {production_payload}")
        r_production = session.patch(url_production, json=production_payload, timeout=30)
        logger.info(f"üì° –°—Ç–∞—Ç—É—Å production: {r_production.status_code}")
        
        r_production.raise_for_status()
        result["production_response"] = r_production.json() if r_production.content else {}
        logger.info("‚úÖ Production –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ XLS)
        url_positions = f"{BASE}/api/v1/codes-introduction/{document_id}/positions"
        logger.info(f"üìã –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏: {url_positions}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è API
        positions_payload = {"rows": []}
        for pos in positions_data:
            position = {
                "name": pos["name"],
                "gtin": pos["gtin"],
                "tnvedCode": production_patch.get("TnvedCode", ""),
                "certificateDocumentNumber": "",
                "certificateDocumentDate": "",
                "costInKopecksWithVat": 0,
                "exciseInKopecks": 0,
                "productGroup": "wheelChairs"
            }
            positions_payload["rows"].append(position)
        
        logger.info(f"üì¶ Positions payload: {positions_payload}")
        r_positions = session.post(url_positions, json=positions_payload, timeout=30)
        logger.info(f"üì° –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π: {r_positions.status_code}")
        
        r_positions.raise_for_status()
        result["positions_response"] = r_positions.json() if r_positions.content else {}
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(positions_data)} –ø–æ–∑–∏—Ü–∏–π")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¢–°–î
        url_send_tsd = f"{BASE}/api/v1/codes-introduction/{document_id}/send-to-tsd"
        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¢–°–î: {url_send_tsd}")
        
        r_send_tsd = session.post(url_send_tsd, timeout=30)
        logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –¢–°–î: {r_send_tsd.status_code}")
        
        r_send_tsd.raise_for_status()
        result["send_to_tsd_response"] = r_send_tsd.json() if r_send_tsd.content else {}
        logger.info("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¢–°–î")

        # 5. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        url_final = f"{BASE}/api/v1/codes-introduction/{document_id}"
        r_final = session.get(url_final, timeout=15)
        r_final.raise_for_status()
        result["final_introduction"] = r_final.json()
        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {result['final_introduction']}")

        return True, result

    except requests.exceptions.HTTPError as e:
        error_msg = f"‚ùå HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}: {e.response.text}"
        logger.error(error_msg)
        result["errors"].append(error_msg)
        return False, result
    except requests.exceptions.RequestException as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
        logger.error(error_msg)
        result["errors"].append(error_msg)
        return False, result
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        result["errors"].append(error_msg)
        return False, result

class TestPerformIntroductionFromOrderTsd(unittest.TestCase):
    def setUp(self):
        # –ú–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è requests
        self.mock_response_class = type('MockResponse', (), {
            'status_code': 200,
            'text': '',
            'content': b'{}',
            'raise_for_status': lambda self: None,
            'json': lambda self: {}
        })()
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–æ–∫ –¥–ª—è Session
        self.session = Mock(spec=requests.Session)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session.post.side_effect = self._mock_post
        self.session.patch.side_effect = self._mock_patch
        self.session.get.return_value = self._create_mock_response(200, json_data={'status': 'final'})
    
    def _create_mock_response(self, status_code, text=None, json_data=None):
        response = Mock()
        response.status_code = status_code
        response.text = text or ''
        response.content = b'{}' if not text else text.encode()
        response.raise_for_status.return_value = None
        response.json.return_value = json_data or {}
        return response
    
    def _mock_post(self, url, json=None, **kwargs):
        print(f"POST URL: {url}")
        if "codes-introduction?" in url:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
            return self._create_mock_response(200, text='"doc123"')
        elif "/positions" in url:
            # –ó–¥–µ—Å—å –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º payload!
            print("=== POSITIONS PAYLOAD ===")
            print(json)
            print("=== END POSITIONS PAYLOAD ===")
            return self._create_mock_response(200, json_data={'success': True})
        elif "/send-to-tsd" in url:
            return self._create_mock_response(200, json_data={'sent': True})
        else:
            return self._create_mock_response(200, json_data={})
    
    def _mock_patch(self, url, json=None, **kwargs):
        print(f"PATCH URL: {url}")
        if json:
            print("PRODUCTION PAYLOAD:", json)
        return self._create_mock_response(200, json_data={'updated': True})
    
    def test_perform_introduction_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ positions_payload."""
        codes_order_id = "order123"
        positions_data = [
            {"name": "Product1", "gtin": "1234567890123"},
            {"name": "Product2", "gtin": "9876543210987"}
        ]
        production_patch = {
            "documentNumber": "DOC001",
            "productionDate": "2025-10-05",
            "expirationDate": "2025-11-05",
            "batchNumber": "BATCH001",
            "TnvedCode": "1234"  # –≠—Ç–æ –ø–æ–ø–∞–¥—ë—Ç –≤ tnvedCode –ø–æ–∑–∏—Ü–∏–π
        }
        
        success, result = perform_introduction_from_order_tsd(
            self.session, codes_order_id, positions_data, production_patch
        )
        
        # –ê—Å—Å–µ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—Ö–∞
        self.assertTrue(success)
        self.assertEqual(result["errors"], [])
        self.assertEqual(result["introduction_id"], "doc123")
        self.assertIn("positions_response", result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ POST –Ω–∞ positions –±—ã–ª –≤—ã–∑–≤–∞–Ω
        post_calls = [call for call in self.session.post.call_args_list if "/positions" in str(call[0][0])]
        self.assertEqual(len(post_calls), 1)

if __name__ == '__main__':
    unittest.main()