import os
import copy
import uuid
import threading
from concurrent.futures import ThreadPoolExecutor
import time
from datetime import datetime, timedelta
from logger import logger
import pandas as pd # type: ignore
from dataclasses import dataclass, asdict
from typing import List, Tuple, Dict, Any
from get_gtin import lookup_gtin, lookup_by_gtin
from api import codes_order, download_codes, make_task_on_tsd
from cookies import get_valid_cookies
from utils import make_session_with_cookies, get_tnved_code, save_snapshot, save_order_history
import update
import customtkinter as ctk
import tkinter as tk
import tkinter.messagebox as mbox
from tkinter import ttk, font
from dotenv import load_dotenv # type: ignore
from options import (
    simplified_options, color_required, venchik_required,
    color_options, venchik_options, size_options, units_options
)

load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã 
BASE = os.getenv("BASE_URL")
PRODUCT_GROUP = os.getenv("PRODUCT_GROUP")
RELEASE_METHOD_TYPE = os.getenv("RELEASE_METHOD_TYPE")
CIS_TYPE = os.getenv("CIS_TYPE")  
FILLING_METHOD = os.getenv("FILLING_METHOD")  
THUMBPRINT = os.getenv("THUMBPRINT")
NOMENCLATURE_XLSX = "data/nomenclature.xlsx"

# -----------------------------
# Data container
# -----------------------------
@dataclass
class OrderItem:
    order_name: str         # –ó–∞—è–≤–∫–∞ ‚Ññ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è "–ó–∞–∫–∞–∑ –∫–æ–¥–æ–≤"
    simpl_name: str         # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
    size: str               # –†–∞–∑–º–µ—Ä
    units_per_pack: str     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≤ —É–ø–∞–∫–æ–≤–∫–µ (—Å—Ç—Ä–æ–∫–∞, –¥–ª—è –ø–æ–∏—Å–∫–∞)
    codes_count: int        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
    gtin: str = ""          # –Ω–∞–π–¥—ë–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
    full_name: str = ""     # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    tnved_code: str = ""    # –¢–Ω–≤—ç–¥-–∫–æ–¥
    cisType: str = ""       # —Ç–∏–ø –∫–æ–¥–∞ (CIS_TYPE –∏–∑ .env)

class SessionManager:
    _lock = threading.Lock()
    _session = None
    _last_update = 0
    _lifetime = 60 * 13  # 13 –º–∏–Ω—É—Ç
    _update_event = threading.Event()
    _update_thread = None
    _initialized = False

    @classmethod
    def initialize(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not cls._initialized:
            cls._initialized = True
            # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            cls.start_background_update()
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            cls._update_event.set()

    @classmethod
    def start_background_update(cls):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies"""
        if cls._update_thread is None or not cls._update_thread.is_alive():
            cls._update_thread = threading.Thread(
                target=cls._background_update_worker, 
                daemon=True,
                name="SessionUpdater"
            )
            cls._update_thread.start()
            print("‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –∑–∞–ø—É—â–µ–Ω–æ")

    @classmethod
    def _background_update_worker(cls):
        """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies"""
        while True:
            try:
                # –ñ–¥–µ–º 13 –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                update_triggered = cls._update_event.wait(timeout=cls._lifetime)
                
                print(f"üîß –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies: {'–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ' if update_triggered else '–ø–ª–∞–Ω–æ–≤–æ–µ'}")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ cookies
                cookies = get_valid_cookies()
                new_session = make_session_with_cookies(cookies)
                
                with cls._lock:
                    cls._session = new_session
                    cls._last_update = time.time()
                    
                print(f"‚úÖ Cookies —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 13 –º–∏–Ω—É—Ç")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                cls._update_event.clear()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ cookies: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                time.sleep(60)

    @classmethod
    def get_session(cls):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏)"""
        cls.initialize()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        
        with cls._lock:
            now = time.time()
            
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            if cls._session is None or now - cls._last_update > cls._lifetime:
                print("‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ cookies (—Å–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞)")
                cookies = get_valid_cookies()
                cls._session = make_session_with_cookies(cookies)
                cls._last_update = now
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                cls._update_event.set()
            elif now - cls._last_update > cls._lifetime * 0.8:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å–∫–æ—Ä–æ —É—Å—Ç–∞—Ä–µ–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
                cls._update_event.set()
                
            return cls._session

    @classmethod
    def trigger_immediate_update(cls):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies"""
        cls._update_event.set()
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –∑–∞–ø—É—â–µ–Ω–æ")

    @classmethod
    def get_session_info(cls):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        with cls._lock:
            now = time.time()
            age = now - cls._last_update if cls._last_update else 0
            return {
                "has_session": cls._session is not None,
                "age_seconds": age,
                "minutes_until_update": max(0, cls._lifetime - age) / 60
            }

def make_order_to_kontur(it, session) -> Tuple[bool, str]:
    """
    API-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è OrderItem.
    """
    try:
        payload = asdict(it)
        payload["_uid"] = getattr(it, "_uid", None)

        # order_name = —Ç–æ, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        document_number = payload.get("order_name") or "NO_NAME"

        # —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
        positions = [{
            "gtin": payload.get("gtin"),
            "name": payload.get("full_name") or payload.get("simpl_name") or "",
            "tnvedCode": payload.get("tnved_code"),
            "quantity": payload.get("codes_count", 1),
            "cisType": payload.get("cisType")
        }]


        # --- –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π POST ---
        resp = codes_order(
            session,
            str(document_number),
            str(PRODUCT_GROUP),
            str(RELEASE_METHOD_TYPE),
            positions,
            filling_method=str(FILLING_METHOD),
            thumbprint=str(THUMBPRINT)
        )

        if not resp:
            return False, "No response from API"

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: –µ—Å–ª–∏ documentId —É–∂–µ –µ—Å—Ç—å, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        document_id = resp.get("documentId") or resp.get("id")  # –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API
        status = resp.get("status") or "unknown"

        logger.info("–§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –î–û–ö–£–ú–ï–ù–¢–ê:", status)
        return True, f"Document {document_number} processed, status: {status}, id: {document_id}"

    except Exception as e:
        return False, f"Exception: {e}"

class App(ctk.CTk):
    def __init__(self, df):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        repo_dir = os.path.abspath(os.path.dirname(__file__))
        update.check_for_updates(repo_dir=repo_dir, pre_update_cleanup=self.cleanup_before_update, auto_restart=True)
        
        self.title("Kontur Marking")
        self.geometry("1000x800")
        self.minsize(900, 700)
        self._setup_fonts()

        self.df = df
        self.collected: List[OrderItem] = []
        self.download_list: List[dict] = []
        
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        SessionManager.initialize()
        
        # THREADING
        self.download_executor = ThreadPoolExecutor(max_workers=2)
        self.status_check_executor = ThreadPoolExecutor(max_workers=1)
        self.auto_download_active = False
        self.execute_all_executor = ThreadPoolExecutor(max_workers=3)
        self.intro_executor = ThreadPoolExecutor(max_workers=3)
        self.intro_tsd_executor = ThreadPoolExecutor(max_workers=3)
        
        self._setup_ui()
        self.start_auto_status_check()
        
        # Atributes for linter
        self.prod_date_entry: ctk.CTkEntry | None = None
        self.exp_date_entry: ctk.CTkEntry | None = None
        self.intro_number_entry: ctk.CTkEntry | None = None
        self.batch_entry: ctk.CTkEntry | None = None

        # TSD status check
        self.sent_to_tsd_items = set()
    
    def cleanup_before_update(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º."""
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
            self.auto_download_active = False
            self.download_executor.shutdown(wait=False)
            self.status_check_executor.shutdown(wait=False)
            self.execute_all_executor.shutdown(wait=False)
            self.intro_executor.shutdown(wait=False)
            self.intro_tsd_executor.shutdown(wait=False)
            print("‚úÖ –ü–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {e}")

    def _setup_fonts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —à—Ä–∏—Ñ—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        available_fonts = font.families()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (–æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∫ –º–µ–Ω–µ–µ)
        preferred_fonts = [
            "Segoe UI Variable Display",  # Windows 11
            "Segoe UI",                   # Windows 10/11
            "Arial",                      # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
            "Tahoma",                     # –•–æ—Ä–æ—à–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
            "Verdana",                    # –®–∏—Ä–æ–∫–∏–π
            "Microsoft Sans Serif",       # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Windows
            "Calibri",                    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π
            "DejaVu Sans",                # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç
        self.font_family = "TkDefaultFont"
        for font_name in preferred_fonts:
            if font_name in available_fonts:
                self.font_family = font_name
                break
        
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à—Ä–∏—Ñ—Ç: {self.font_family}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —à—Ä–∏—Ñ—Ç–æ–≤
        self.fonts = {
            "title": ctk.CTkFont(family=self.font_family, size=24, weight="bold"),
            "heading": ctk.CTkFont(family=self.font_family, size=16, weight="bold"),
            "subheading": ctk.CTkFont(family=self.font_family, size=14, weight="bold"),
            "normal": ctk.CTkFont(family=self.font_family, size=12),
            "small": ctk.CTkFont(family=self.font_family, size=11),
            "button": ctk.CTkFont(family=self.font_family, size=12, weight="bold"),
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self._set_default_fonts()

    def _set_default_fonts(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
            current_theme = ctk.get_appearance_mode()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —á–µ—Ä–µ–∑ —Ç–µ–º—É
            normal_font = self.fonts["normal"]
            button_font = self.fonts["button"]
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É —Å –Ω—É–∂–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
            ctk.set_default_color_theme("blue")  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –±–∞–∑–æ–≤–∞—è —Ç–µ–º–∞
            
            # –î–ª—è CTkFont –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
            # –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ctk.CTkFrame(self)
        self.main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        self.header_frame = ctk.CTkFrame(self.main_container, height=70)
        self.header_frame.pack(fill="x", pady=(0, 20))
        self.header_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            self.header_frame, 
            text="Kontur Marking System", 
            font=self.fonts["title"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        ).pack(side="left", padx=25, pady=20)
        
        # Tabview
        self.tabview = ctk.CTkTabview(self.main_container)
        self.tabview.pack(fill="both", expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±—ã
        self._setup_create_tab()
        self._setup_download_tab()
        self._setup_introduction_tab()
        self._setup_introduction_tsd_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä —Å –º–∞–ª—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        self.status_bar = ctk.CTkLabel(
            self.main_container, 
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
            anchor="w",
            font=self.fonts["small"]
        )
        self.status_bar.pack(fill="x", pady=(10, 0))

    def _setup_create_tab(self):
        """–¢–∞–± —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏"""
        tab_create = self.tabview.add("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–µ—Ç–∫–æ–π
        main_frame = ctk.CTkFrame(tab_create)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞
        input_frame = ctk.CTkFrame(main_frame)
        input_frame.pack(side="left", fill="y", padx=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        ctk.CTkLabel(
            input_frame, 
            text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏", 
            font=self.fonts["subheading"]
        ).pack(pady=(15, 15))
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        form_frame = ctk.CTkFrame(input_frame)
        form_frame.pack(fill="x", padx=15, pady=10)
        
        # –ó–∞—è–≤–∫–∞ ‚Ññ
        ctk.CTkLabel(form_frame, text="–ó–∞—è–≤–∫–∞ ‚Ññ:", font=self.fonts["normal"]).grid(row=0, column=0, sticky="w", pady=10)
        self.order_entry = ctk.CTkEntry(form_frame, width=250, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", font=self.fonts["normal"])
        self.order_entry.grid(row=0, column=1, pady=10, padx=(10, 0))
        
        # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        ctk.CTkLabel(form_frame, text="–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", font=self.fonts["normal"]).grid(row=1, column=0, sticky="w", pady=10)
        mode_frame = ctk.CTkFrame(form_frame)
        mode_frame.grid(row=1, column=1, sticky="w", pady=10, padx=(10, 0))
        
        self.gtin_var = ctk.StringVar(value="No")
        ctk.CTkRadioButton(mode_frame, text="–ü–æ–∏—Å–∫ –ø–æ GTIN", variable=self.gtin_var, value="Yes", 
                        command=self.toggle_mode, font=self.fonts["normal"]).pack(side="left", padx=(0, 10))
        ctk.CTkRadioButton(mode_frame, text="–í—ã–±–æ—Ä –æ–ø—Ü–∏–π", variable=self.gtin_var, value="No", 
                        command=self.toggle_mode, font=self.fonts["normal"]).pack(side="left")
        
        # GTIN frame (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
        self.gtin_frame = ctk.CTkFrame(form_frame)
        ctk.CTkLabel(self.gtin_frame, text="GTIN:", font=self.fonts["normal"]).grid(row=0, column=0, sticky="w", pady=10)
        self.gtin_entry = ctk.CTkEntry(self.gtin_frame, width=250, placeholder_text="–í–≤–µ–¥–∏—Ç–µ GTIN", font=self.fonts["normal"])
        self.gtin_entry.grid(row=0, column=1, pady=10, padx=(10, 0))
        self._add_entry_context_menu(self.gtin_entry)
        
        # Select frame
        self.select_frame = ctk.CTkFrame(form_frame)
        
        # –í–∏–¥ —Ç–æ–≤–∞—Ä–∞
        ctk.CTkLabel(self.select_frame, text="–í–∏–¥ —Ç–æ–≤–∞—Ä–∞:", font=self.fonts["normal"]).grid(row=0, column=0, sticky="w", pady=10)
        self.simpl_combo = ctk.CTkComboBox(self.select_frame, values=simplified_options, 
                                        command=self.update_options, width=250, font=self.fonts["normal"])
        self.simpl_combo.grid(row=0, column=1, pady=10, padx=(10, 0))
        
        # –¶–≤–µ—Ç
        self.color_label = ctk.CTkLabel(self.select_frame, text="–¶–≤–µ—Ç:", font=self.fonts["normal"])
        self.color_combo = ctk.CTkComboBox(self.select_frame, values=color_options, width=250, font=self.fonts["normal"])
        
        # –í–µ–Ω—á–∏–∫
        self.venchik_label = ctk.CTkLabel(self.select_frame, text="–í–µ–Ω—á–∏–∫:", font=self.fonts["normal"])
        self.venchik_combo = ctk.CTkComboBox(self.select_frame, values=venchik_options, width=250, font=self.fonts["normal"])
        
        # –†–∞–∑–º–µ—Ä
        ctk.CTkLabel(self.select_frame, text="–†–∞–∑–º–µ—Ä:", font=self.fonts["normal"]).grid(row=3, column=0, sticky="w", pady=10)
        self.size_combo = ctk.CTkComboBox(self.select_frame, values=size_options, width=250, font=self.fonts["normal"])
        self.size_combo.grid(row=3, column=1, pady=10, padx=(10, 0))
        
        # –£–ø–∞–∫–æ–≤–∫–∞
        ctk.CTkLabel(self.select_frame, text="–ï–¥–∏–Ω–∏—Ü –≤ —É–ø–∞–∫–æ–≤–∫–µ:", font=self.fonts["normal"]).grid(row=4, column=0, sticky="w", pady=10)
        self.units_combo = ctk.CTkComboBox(self.select_frame, values=[str(u) for u in units_options], width=250, font=self.fonts["normal"])
        self.units_combo.grid(row=4, column=1, pady=10, padx=(10, 0))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤
        ctk.CTkLabel(form_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤:", font=self.fonts["normal"]).grid(row=6, column=0, sticky="w", pady=10)
        self.codes_entry = ctk.CTkEntry(form_frame, width=250, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", font=self.fonts["normal"])
        self.codes_entry.grid(row=6, column=1, pady=10, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_btn = ctk.CTkButton(
            form_frame, 
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", 
            command=self.add_item,
            height=35,
            fg_color="#2AA876",
            hover_color="#228B69",
            font=self.fonts["button"]
        )
        add_btn.grid(row=7, column=0, columnspan=2, pady=20)
        
        self.toggle_mode()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–∞–±–ª–∏—Ü–∞ –∏ –ª–æ–≥
        right_frame = ctk.CTkFrame(main_frame)
        right_frame.pack(side="right", fill="both", expand=True)
        
        # –¢–∞–±–ª–∏—Ü–∞
        table_frame = ctk.CTkFrame(right_frame)
        table_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        ctk.CTkLabel(
            table_frame, 
            text="–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π", 
            font=self.fonts["subheading"]
        ).pack(anchor="w", pady=(10, 5))
        
        columns = ("idx", "full_name", "simpl_name", "size", "units_per_pack", "gtin", "codes_count", "order_name", "uid")
        self.tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=12)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "idx": "‚Ññ", "full_name": "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "simpl_name": "–£–ø—Ä–æ—â–µ–Ω–Ω–æ",
            "size": "–†–∞–∑–º–µ—Ä", "units_per_pack": "–£–ø–∞–∫–æ–≤–∫–∞", "gtin": "GTIN",
            "codes_count": "–ö–æ–¥–æ–≤", "order_name": "–ó–∞—è–≤–∫–∞", "uid": "UID"
        }
        
        for col, text in headers.items():
            self.tree.heading(col, text=text)
            self.tree.column(col, width=80 if col == "idx" else 120)
        
        # Scrollbar –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(right_frame)
        btn_frame.pack(fill="x", pady=(0, 10))
        
        delete_btn = ctk.CTkButton(
            btn_frame, 
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            command=self.delete_item, 
            width=120,
            font=self.fonts["button"]
        )
        delete_btn.pack(side="left", padx=5)
        
        self.execute_btn = ctk.CTkButton(
            btn_frame, 
            text="‚ö° –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ", 
            command=self.execute_all,
            width=120,
            fg_color="#2E86C1",
            hover_color="#2874A6",
            font=self.fonts["button"]
        )
        self.execute_btn.pack(side="left", padx=5)
        
        clear_btn = ctk.CTkButton(
            btn_frame, 
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", 
            command=self.clear_all, 
            width=120,
            font=self.fonts["button"]
        )
        clear_btn.pack(side="left", padx=5)
        
        # –õ–æ–≥
        log_frame = ctk.CTkFrame(right_frame)
        log_frame.pack(fill="both", expand=True, pady=(5, 10))  # –¥–æ–±–∞–≤–∏–ª –Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É

        ctk.CTkLabel(
            log_frame, 
            text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:", 
            font=self.fonts["subheading"]
        ).pack(anchor="w", pady=(10, 5))

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ–ª—è –ª–æ–≥–∞
        self.log_text = ctk.CTkTextbox(log_frame, height=250, font=self.fonts["normal"])  # –±—ã–ª–æ 150, —Å—Ç–∞–ª–æ 250
        self.log_text.pack(fill="both", expand=True, padx=5, pady=(0, 5))
        self.log_text.configure(state="disabled")

        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∞
        self.log_text.bind("<Button-3>", self._show_log_context_menu)
        self.log_text.bind("<Control-c>", lambda e: self._copy_log_text())
        self.log_text.bind("<Control-C>", lambda e: self._copy_log_text())
        
        # –°—Ç–∏–ª—å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self._configure_treeview_style()
    
    def _setup_download_tab(self):
        """–¢–∞–± —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤"""
        tab_download = self.tabview.add("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤")
        
        main_frame = ctk.CTkFrame(tab_download)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - —Ç–∞–±–ª–∏—Ü–∞
        table_frame = ctk.CTkFrame(main_frame)
        table_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        ctk.CTkLabel(table_frame, text="–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))
        
        download_columns = ("order_name", "status", "filename", "document_id")
        self.download_tree = ttk.Treeview(table_frame, columns=download_columns, show="headings", height=12)
        
        headers = {
            "order_name": "–ó–∞—è–≤–∫–∞", "status": "–°—Ç–∞—Ç—É—Å", 
            "filename": "–§–∞–π–ª", "document_id": "ID –∑–∞–∫–∞–∑–∞"
        }
        
        for col, text in headers.items():
            self.download_tree.heading(col, text=text)
            self.download_tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.download_tree.yview)
        self.download_tree.configure(yscrollcommand=scrollbar.set)
        self.download_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –ª–æ–≥
        log_frame = ctk.CTkFrame(main_frame)
        log_frame.pack(fill="both", expand=True)
        
        ctk.CTkLabel(log_frame, text="–õ–æ–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))
        
        self.download_log_text = ctk.CTkTextbox(log_frame, height=150)
        self.download_log_text.pack(fill="both", expand=True, padx=5, pady=(0, 5))
        self.download_log_text.configure(state="disabled")


    def _add_entry_context_menu(self, entry: ctk.CTkEntry):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫) –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø–æ–ª—è entry.

        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ –≤ —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ Ctrl+C/Ctrl+V –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∫–∞–∫ –≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–π, —Ç–∞–∫ –∏ –≤ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∞—Ö, –∞ —Ç–∞–∫–∂–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
        —Å–æ—á–µ—Ç–∞–Ω–∏—è (Shift-Insert, Ctrl-Insert, Shift-Delete).
        """
        menu = tk.Menu(self, tearoff=0)

        def _paste(event=None):
            try:
                clip = self.clipboard_get()
            except Exception:
                return "break"
            try:
                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–æ ‚Äî –∑–∞–º–µ–Ω—è–µ–º
                try:
                    sel_first = entry.index("sel.first")
                    sel_last = entry.index("sel.last")
                    entry.delete(sel_first, sel_last)
                except Exception:
                    pass
                entry.insert("insert", clip)
            except Exception:
                pass
            return "break"

        def _copy(event=None):
            try:
                sel = entry.selection_get()
                self.clipboard_clear()
                self.clipboard_append(sel)
            except Exception:
                pass
            return "break"

        def _cut(event=None):
            try:
                sel_first = entry.index("sel.first")
                sel_last = entry.index("sel.last")
                sel = entry.get()[sel_first:sel_last]
                self.clipboard_clear()
                self.clipboard_append(sel)
                entry.delete(sel_first, sel_last)
            except Exception:
                pass
            return "break"

        def _select_all(event=None):
            try:
                entry.select_range(0, 'end')
                entry.icursor('end')
            except Exception:
                pass
            return "break"

        menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=_paste)
        menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=_copy)
        menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=_cut)
        menu.add_separator()
        menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=_select_all)

        # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ (Button-3) –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –û–°
        def _show_menu(event):
            try:
                menu.tk_popup(event.x_root, event.y_root)
            finally:
                menu.grab_release()
            return "break"

        entry.bind('<Button-3>', _show_menu)
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è macOS (Control-Button-1) –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
        entry.bind('<Control-Button-1>', _show_menu)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∫–ª–∞–≤–∏—à: —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ, —Ç–∞–∫ –∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
        # mapping: c -> —Å, v -> –º, x -> —á, a -> —Ñ (—Ä—É—Å—Å–∫–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞)
        paste_keys = {'v', '–º'}
        copy_keys = {'c', '—Å'}
        cut_keys = {'x', '—á'}
        select_keys = {'a', '—Ñ'}

        def _on_ctrl_key(event):
            key = ''
            try:
                key = (event.keysym or '').lower()
            except Exception:
                pass
            # event.char –∏–Ω–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –∏ –µ–≥–æ
            if not key:
                try:
                    key = (event.char or '').lower()
                except Exception:
                    key = ''

            if key in paste_keys:
                return _paste(event)
            if key in copy_keys:
                return _copy(event)
            if key in cut_keys:
                return _cut(event)
            if key in select_keys:
                return _select_all(event)
            # –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ ‚Äî –≤–µ—Ä–Ω—É—Ç—å None, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ
            return None

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Ctrl+Key –∏ Command+Key (mac)
        entry.bind('<Control-Key>', _on_ctrl_key)
        entry.bind('<Control-KeyRelease>', lambda e: 'break')
        entry.bind('<Command-Key>', _on_ctrl_key)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è
        entry.bind('<Shift-Insert>', _paste)
        entry.bind('<Control-Insert>', _copy)
        entry.bind('<Shift-Delete>', _cut)

    def toggle_mode(self):
        if self.gtin_var.get() == "Yes":
            self.select_frame.grid_forget()
            self.gtin_frame.grid(row=3, column=0, columnspan=2, pady=5, padx=5)
        else:
            self.gtin_frame.grid_forget()
            self.select_frame.grid(row=3, column=0, columnspan=2, pady=5, padx=5)
            self.update_options()

    def update_options(self, value=None):
        simpl = self.simpl_combo.get().lower()
        if simpl in [c.lower() for c in color_required]:
            self.color_label.grid(row=1, column=0, pady=5, padx=5, sticky="w")
            self.color_combo.grid(row=1, column=1, pady=5, padx=5)
        else:
            self.color_label.grid_forget()
            self.color_combo.grid_forget()

        if simpl in [c.lower() for c in venchik_required]:
            self.venchik_label.grid(row=2, column=0, pady=5, padx=5, sticky="w")
            self.venchik_combo.grid(row=2, column=1, pady=5, padx=5)
        else:
            self.venchik_label.grid_forget()
            self.venchik_combo.grid_forget()

    def add_item(self):
        order_name = self.order_entry.get().strip()
        if not order_name:
            self.log_insert("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞—è–≤–∫—É.")
            return

        try:
            codes_count = int(self.codes_entry.get().strip())
        except ValueError:
            self.log_insert("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        if self.gtin_var.get() == "Yes":
            gtin_input = self.gtin_entry.get().strip()
            if not gtin_input:
                self.log_insert("GTIN –ø—É—Å—Ç–æ–π ‚Äî –æ—Ç–º–µ–Ω–∞.")
                return
            full_name, simpl = lookup_by_gtin(self.df, gtin_input)
            tnved_code = get_tnved_code(simpl or "")
            if not simpl:
                self.log_insert(f"GTIN {gtin_input} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ ‚Äî –ø–æ–∑–∏—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                return
            it = OrderItem(
                order_name=order_name,
                simpl_name=simpl,
                size="–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                units_per_pack="–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                codes_count=codes_count,
                gtin=gtin_input,
                full_name=full_name or "",
                tnved_code=tnved_code,
                cisType=str(CIS_TYPE)
            )
            self.log_insert(f"‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ GTIN: {gtin_input} ‚Äî {codes_count} –∫–æ–¥–æ–≤ ‚Äî –∑–∞—è–≤–∫–∞ ‚Ññ {order_name}")
        else:
            simpl = self.simpl_combo.get()
            color = self.color_combo.get() if self.color_combo.winfo_viewable() else None
            venchik = self.venchik_combo.get() if self.venchik_combo.winfo_viewable() else None
            size = self.size_combo.get()
            units = self.units_combo.get()

            if not all([simpl, size, units]):
                self.log_insert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.")
                return

            gtin, full_name = lookup_gtin(self.df, simpl, size, units, color, venchik)
            if not gtin:
                self.log_insert(f"GTIN –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ({simpl}, {size}, {units}, {color}, {venchik}) ‚Äî –ø–æ–∑–∏—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                return

            tnved_code = get_tnved_code(simpl)

            it = OrderItem(
                order_name=order_name,
                simpl_name=simpl,
                size=size,
                units_per_pack=units,
                codes_count=codes_count,
                gtin=gtin,
                full_name=full_name or "",
                tnved_code=tnved_code,
                cisType=str(CIS_TYPE)
            )
            self.log_insert(
                f"‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ: {simpl} {size}, {units} —É–ø., {color or ''} ‚Äî "
                f"GTIN {gtin} ‚Äî {codes_count} –∫–æ–¥(–æ–≤) ‚Äî –¢–ù–í–≠–î {tnved_code} ‚Äî –∑–∞—è–≤–∫–∞ ‚Ññ {order_name}"
            )

        setattr(it, "_uid", uuid.uuid4().hex)
        self.collected.append(it)
        self.update_tree()

    def update_tree(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
        for idx, it in enumerate(self.collected, start=1):
            self.tree.insert("", "end", values=(
                idx, it.full_name, it.simpl_name, it.size, it.units_per_pack,   
                it.gtin, it.codes_count, it.order_name, getattr(it, "_uid", "no-uid")
            ))

    def delete_item(self):
        selected = self.tree.selection()
        if not selected:
            self.log_insert("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        idx = self.tree.index(selected[0])
        removed = self.collected.pop(idx)
        self.log_insert(f"–£–¥–∞–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {removed.simpl_name} ‚Äî GTIN {removed.gtin}")
        self.update_tree()

    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, –¥–µ—Ä–µ–≤–æ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            self.collected.clear()
            
            # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ –∑–∞–∫–∞–∑–æ–≤
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞—è–≤–∫–∏
            self.order_entry.delete(0, "end")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ GTIN (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ)
            if hasattr(self, 'gtin_entry'):
                self.gtin_entry.delete(0, "end")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ-–±–æ–∫—Å—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if hasattr(self, 'simpl_combo'):
                self.simpl_combo.set("")
            
            if hasattr(self, 'color_combo'):
                self.color_combo.set("")
            
            if hasattr(self, 'venchik_combo'):
                self.venchik_combo.set("")
            
            if hasattr(self, 'size_combo'):
                self.size_combo.set("")
            
            if hasattr(self, 'units_combo'):
                self.units_combo.set("")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–¥–æ–≤
            if hasattr(self, 'codes_entry'):
                self.codes_entry.delete(0, "end")
            
            # –û—á–∏—â–∞–µ–º –ª–æ–≥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self.log_text.configure(state="normal")
            self.log_text.delete("1.0", "end")
            self.log_text.configure(state="disabled")
            
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
            self.log_insert("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            self.log_insert(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


    def execute_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            if not self.collected:
                self.log_insert("–ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
                return

            confirm = tk.messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {len(self.collected)} –∑–∞–¥–∞—á(–∏)?") # type: ignore
            if not confirm:
                self.log_insert("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return

            to_process = copy.deepcopy(self.collected)
            save_snapshot(to_process)
            save_order_history(to_process)
            
            self.log_insert(f"\n–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {len(to_process)} –∑–∞–∫–∞–∑–æ–≤.")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            self.execute_btn.configure(state="disabled")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ ThreadPoolExecutor
            futures = []
            for it in to_process:
                session = SessionManager.get_session()
                fut = self.execute_all_executor.submit(self._execute_worker, it, session)
                futures.append((fut, it))

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            def execute_all_monitor():
                completed = 0
                success_count = 0
                fail_count = 0
                results = []
                
                for fut, it in futures:
                    try:
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        ok, msg = fut.result(timeout=60)  # 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç
                        results.append((ok, msg, it))
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        self.after(0, self._on_execute_finished, it, ok, msg)
                        
                        if ok:
                            success_count += 1
                        else:
                            fail_count += 1
                            
                        completed += 1
                        
                    except Exception as e:
                        error_msg = f"–¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
                        self.after(0, self._on_execute_finished, it, False, error_msg)
                        fail_count += 1
                        completed += 1
                
                # –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
                self.after(0, self._on_all_execute_finished, success_count, fail_count, results)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
                self.after(0, self.start_auto_status_check)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=execute_all_monitor, daemon=True).start()

        except Exception as e:
            self.log_insert(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            self.execute_btn.configure(state="normal")

    def _execute_worker(self, order_item, session):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.log_insert(f"üé¨ –ó–∞–ø—É—Å–∫ –ø–æ–∑–∏—Ü–∏–∏: {order_item.simpl_name}  GTIN {order_item.gtin}  –∑–∞—è–≤–∫–∞ ‚Ññ {order_item.order_name}")
            ok, msg = make_order_to_kontur(order_item, session)
            return ok, msg
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ: {e}"

    def _on_execute_finished(self, order_item, ok, msg):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if ok:
            self.log_insert(f"‚ú® –ó–∞—è–≤–∫–∞ ¬´{order_item.order_name}¬ª –Ω–∞ {order_item.simpl_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ")
            try:
                # –ü–∞—Ä—Å–∏–º document_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                document_id = msg.split("id: ")[1].strip()
                self.download_list.append({
                    'order_name': order_item.order_name,
                    'document_id': document_id,
                    'status': '–û–∂–∏–¥–∞–µ—Ç',
                    'filename': None,
                    'simpl': order_item.simpl_name,
                    'full_name': order_item.full_name
                })
                self.update_download_tree()
            except Exception as e:
                self.log_insert(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å document_id –∏–∑: {msg} - {e}")
        else:
            self.log_insert(f"‚ùå –û—à–∏–±–∫–∞: {order_item.simpl_name} | –∑–∞—è–≤–∫–∞ '{order_item.order_name}' => {msg}")

    def _on_all_execute_finished(self, success_count, fail_count, results):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.execute_btn.configure(state="normal")
        
        self.log_insert("\n=== –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
        self.log_insert(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n‚ùå –û—à–∏–±–æ–∫: {fail_count}")

        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if any(not r[0] for r in results):
            self.log_insert("\n–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
            for ok, msg, it in results:
                if not ok:
                    uid = getattr(it, '_uid', None)
                    self.log_insert(f" - uid={uid} | {it.simpl_name} | GTIN {it.gtin} | –∑–∞—è–≤–∫–∞ '{it.order_name}' => {msg}")
    def _reset_input_fields(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ-–±–æ–∫—Å—ã
            comboboxes = ['simpl_combo', 'color_combo', 'venchik_combo', 'size_combo', 'units_combo']
            for combo_name in comboboxes:
                if hasattr(self, combo_name):
                    getattr(self, combo_name).set("")
                
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # self.order_entry.delete(0, "end")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞: {e}")

    

    def log_insert(self, msg: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)"""
        try:
            self.log_text.configure(state="normal")
            self.log_text.insert("end", f"{msg}\n")
            self.log_text.see("end")  # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            self.log_text.configure(state="disabled")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

    def _show_log_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –ª–æ–≥–∞"""
        menu = tk.Menu(self, tearoff=0)
        menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self._copy_log_text)
        menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", command=self._select_all_log_text)
        menu.add_separator()
        menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self._clear_log_text)
        
        menu.tk_popup(event.x_root, event.y_root)

    def _copy_log_text(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            self.log_text.configure(state="normal")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            selected_text = self.log_text.get("sel.first", "sel.last")
            if selected_text:
                self.clipboard_clear()
                self.clipboard_append(selected_text)
        except tk.TclError:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ
            pass
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            self.log_text.configure(state="disabled")

    def _select_all_log_text(self):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥–µ"""
        try:
            self.log_text.configure(state="normal")
            self.log_text.tag_add("sel", "1.0", "end")
            self.log_text.configure(state="disabled")
        except:
            pass

    def _clear_log_text(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞"""
        try:
            self.log_text.configure(state="normal")
            self.log_text.delete("1.0", "end")
            self.log_text.configure(state="disabled")
        except:
            pass


    def start_auto_status_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        if self.auto_download_active:
            return
            
        self.auto_download_active = True
        self.download_log_insert("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
        
        def status_check_worker():
            while self.auto_download_active:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    time.sleep(2)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    pending_orders = [item for item in self.download_list 
                                if item['status'] not in ['–°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è', '–°–∫–∞—á–∞–Ω']]
                    if not pending_orders:
                        continue
                    
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö
                    for item in pending_orders:
                        if not self.auto_download_active:
                            break
                            
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                            status = self._check_order_status(item['document_id'])
                            
                            if status == 'released':
                                self.download_log_insert(f"‚úÖ –ó–∞–∫–∞–∑ {item['order_name']} –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é")
                                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                self.download_executor.submit(self._download_order, item)
                                item['status'] = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
                                self.after(0, self.update_download_tree)
                            elif status in ['processing', 'created']:
                                item['status'] = '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'
                                self.after(0, self.update_download_tree)
                            elif status == 'error':
                                item['status'] = '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
                                self.after(0, self.update_download_tree)
                                
                        except Exception as e:
                            self.download_log_insert(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ {item['order_name']}: {e}")
                            continue
                            
                except Exception as e:
                    self.download_log_insert(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å-—á–µ–∫–µ—Ä–µ: {e}")
                    time.sleep(30)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=status_check_worker, daemon=True).start()

    def _check_order_status(self, document_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        try:
            
            session = SessionManager.get_session()
            
            resp = session.get(f"{BASE}/api/v1/codes-order/{document_id}", timeout=15)
            resp.raise_for_status()
            
            doc = resp.json()
            return doc.get("status", "unknown")
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {document_id}: {e}")

    def _download_order(self, item):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.after(0, lambda: self._update_download_status(item, '–°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è'))
            
            session = SessionManager.get_session()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            filename = download_codes(session, item['document_id'], item['order_name'])
            
            if filename:
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.after(0, lambda: self._finish_download(item, filename))
            else:
                self.after(0, lambda: self._update_download_status(item, '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è'))
                
        except Exception as e:
            self.after(0, lambda: self._update_download_status(item, f'–û—à–∏–±–∫–∞: {e}'))

    def _update_download_status(self, item, status):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ UI"""
        try:
            item['status'] = status
            self.update_download_tree()
            self.download_log_insert(f"üì¶ {item['order_name']}: {status}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.update_idletasks()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    def _finish_download(self, item, filename):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        try:
            item['status'] = '–°–∫–∞—á–∞–Ω'
            item['filename'] = filename
            self.update_download_tree()
            self.download_log_insert(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {filename}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.update_idletasks()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")


    def _add_to_download_list(self, order_item, document_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for item in self.download_list:
            if item['document_id'] == document_id:
                return
                
        new_item = {
            'order_name': order_item.order_name,
            'document_id': document_id,
            'status': '–û–∂–∏–¥–∞–µ—Ç',
            'filename': None,
            'simpl': order_item.simpl_name
        }
        
        self.download_list.append(new_item)
        self.update_download_tree()
        self.download_log_insert(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {order_item.order_name}")

    def update_download_tree(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"""
        for item in self.download_tree.get_children():
            self.download_tree.delete(item)
            
        for item in self.download_list:
            self.download_tree.insert("", "end", values=(
                item['order_name'],
                item['status'],
                item['filename'] or "-",
                item['document_id']
            ))

    def download_log_insert(self, msg: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.download_log_text.insert("end", f"[{timestamp}] {msg}\n")
        self.download_log_text.see("end")

    def on_closing(self):
        self.auto_download_active = False
        for executor in [self.download_executor, self.status_check_executor,
                        self.execute_all_executor, self.intro_executor, self.intro_tsd_executor]:
            executor.shutdown(wait=False, cancel_futures=True)
        self.destroy()
        
    def _setup_introduction_tab(self):
        """–¢–∞–± –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç"""
        tab_intro = self.tabview.add("üîÑ –í–≤–æ–¥ –≤ –æ–±–æ—Ä–æ—Ç")
        self.intro_tab = tab_intro
        
        main_frame = ctk.CTkFrame(tab_intro)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å
        left_frame = ctk.CTkFrame(main_frame)
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - —Ç–∞–±–ª–∏—Ü–∞
        table_frame = ctk.CTkFrame(left_frame)
        table_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        ctk.CTkLabel(table_frame, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))
        
        intro_columns = ("order_name", "document_id", "status", "filename")
        self.intro_tree = ttk.Treeview(table_frame, columns=intro_columns, show="headings", 
                                    height=10, selectmode="extended")
        
        headers = {
            "order_name": "–ó–∞—è–≤–∫–∞", "document_id": "ID –∑–∞–∫–∞–∑–∞",
            "status": "–°—Ç–∞—Ç—É—Å", "filename": "–§–∞–π–ª"
        }
        
        for col, text in headers.items():
            self.intro_tree.heading(col, text=text)
            self.intro_tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.intro_tree.yview)
        self.intro_tree.configure(yscrollcommand=scrollbar.set)
        self.intro_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞
        form_frame = ctk.CTkFrame(left_frame)
        form_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(form_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–≤–æ–¥–∞:", 
                    font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", pady=10, columnspan=4)
        
        # –°–µ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        labels = [
            ("–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–î–î-–ú–ú-–ì–ì–ì–ì):", "prod_date_entry"),
            ("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î-–ú–ú-–ì–ì–ì–ì):", "exp_date_entry"),
            ("–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏:", "batch_entry")
        ]
        
        for i, (label_text, attr_name) in enumerate(labels):
            ctk.CTkLabel(form_frame, text=label_text).grid(row=i+1, column=0, sticky="w", pady=8, padx=5)
            entry = ctk.CTkEntry(form_frame, width=200)
            entry.grid(row=i+1, column=1, pady=8, padx=5)
            setattr(self, attr_name, entry)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        today = datetime.now().strftime("%d-%m-%Y")
        future_date = (datetime.now() + timedelta(days=1826)).strftime("%d-%m-%Y")
        self.prod_date_entry.insert(0, today) # type: ignore
        self.exp_date_entry.insert(0, future_date) # type: ignore
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ctk.CTkFrame(left_frame)
        btn_frame.pack(fill="x", pady=(0, 10))
        
        self.intro_btn = ctk.CTkButton(
            btn_frame, 
            text="üîÑ –í–≤–µ—Å—Ç–∏ –≤ –æ–±–æ—Ä–æ—Ç", 
            command=self.on_introduce_clicked,
            fg_color="#2AA876",
            hover_color="#228B69"
        )
        self.intro_btn.pack(side="left", padx=5)
        
        self.intro_refresh_btn = ctk.CTkButton(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.update_introduction_tree)
        self.intro_refresh_btn.pack(side="left", padx=5)
        
        self.intro_clear_btn = ctk.CTkButton(btn_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_intro_log)
        self.intro_clear_btn.pack(side="left", padx=5)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ª–æ–≥
        right_frame = ctk.CTkFrame(main_frame)
        right_frame.pack(side="right", fill="both", expand=True, padx=(5, 0))
        
        log_frame = ctk.CTkFrame(right_frame)
        log_frame.pack(fill="both", expand=True)
        
        ctk.CTkLabel(log_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))
        
        self.intro_log_text = ctk.CTkTextbox(log_frame)
        self.intro_log_text.pack(fill="both", expand=True, padx=5, pady=(0, 5))
        self.intro_log_text.configure(state="disabled")
        
        self.update_introduction_tree()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏–∑ –î–î-–ú–ú-–ì–ì–ì–ì –≤ –ì–ì–ì–ì-–ú–ú-–î–î
    def convert_date_format(self, date_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î-–ú–ú-–ì–ì–ì–ì –≤ –ì–ì–ì–ì-–ú–ú-–î–î"""
        try:
            if date_str and len(date_str) == 10 and date_str[2] == '-' and date_str[5] == '-':
                day, month, year = date_str.split('-')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                datetime(int(year), int(month), int(day))
                return f"{year}-{month}-{day}"
        except (ValueError, IndexError):
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            pass
        return date_str


    def clear_intro_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥ –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç"""
        try:
            self.intro_log_text.configure(state="normal")
            self.intro_log_text.delete("1.0", "end")
            self.intro_log_text.configure(state="disabled")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞: {e}")

    def intro_log_insert(self, text: str):
        """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–∞–± '–í–≤–æ–¥' (–≤—ã–∑–æ–≤—ã —Ç–æ–ª—å–∫–æ –∏–∑ GUI-–ø–æ—Ç–æ–∫–∞)."""
        try:
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            msg = f"{now} - {text}"
            
            self.intro_log_text.configure(state="normal")
            self.intro_log_text.insert("end", msg + "\n")
            self.intro_log_text.see("end")
            self.intro_log_text.configure(state="disabled")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

    def update_introduction_tree(self):
        """–ù–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∑–∞–∫–∞–∑–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö status == '–°–∫–∞—á–∞–Ω'"""
        try:
            # –û—á–∏—Å—Ç–∏—Ç—å –¥–µ—Ä–µ–≤–æ
            for item in self.intro_tree.get_children():
                self.intro_tree.delete(item)
            
            # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ self.download_list
            for item in self.download_list:
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                if item.get("status") in ("–°–∫–∞—á–∞–Ω", "Downloaded", "–û–∂–∏–¥–∞–µ—Ç") and item.get("document_id"):
                    vals = (
                        item.get("order_name", ""), 
                        item.get("document_id", ""), 
                        item.get("status", ""), 
                        item.get("filename", "")
                    )
                    self.intro_tree.insert("", "end", iid=item.get("document_id"), values=vals)
        except Exception as e:
            self.intro_log_insert(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞: {e}")

    def get_selected_intro_items(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ download_list, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º –≤ intro_tree."""
        try:
            sel = self.intro_tree.selection()
            selected = []
            id_to_item = {it['document_id']: it for it in self.download_list if it.get('document_id')}
            
            for iid in sel:
                it = id_to_item.get(iid)
                if it:
                    selected.append(it)
            return selected
        except Exception as e:
            self.intro_log_insert(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            return []

    def validate_iso_date(self, s: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD."""
        try:
            if not s:
                return False
            datetime.strptime(s, "%Y-%m-%d")
            return True
        except ValueError:
            return False
    def on_introduce_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ‚Äî —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ—Ç threads –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        try:
            selected_items = self.get_selected_intro_items()
            if not selected_items:
                self.intro_log_insert("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
                return

            # –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:
            prod_date = self.convert_date_format(self.prod_date_entry.get().strip()) # type: ignore
            exp_date = self.convert_date_format(self.exp_date_entry.get().strip()) # type: ignore
            batch_num = self.batch_entry.get().strip() # type: ignore
            thumbprint = THUMBPRINT

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []
            
            if not batch_num:
                errors.append("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏.")
            if not thumbprint:
                errors.append("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.")

            if errors:
                for error in errors:
                    self.intro_log_insert(f"‚ùå {error}")
                return


            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            self.intro_btn.configure(state="disabled")
            self.intro_log_insert(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç –¥–ª—è {len(selected_items)} –∑–∞–∫–∞–∑–∞(–æ–≤)...")
            self.intro_log_insert(f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: {prod_date}, –û–∫–æ–Ω—á–∞–Ω–∏–µ: {exp_date}, –ü–∞—Ä—Ç–∏—è: {batch_num}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
            futures = []
            for it in selected_items:
                docid = it["document_id"]
                order_name = it.get("order_name", "Unknown")
                simpl_name = it.get("simpl")
                self.intro_log_insert(f"‚è≥ –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {order_name} (ID: {docid})")
                tnved_code = get_tnved_code(simpl_name)
                # –§–æ—Ä–º–∏—Ä—É–µ–º production_patch
                production_patch = {
                    "comment": "",
                    "documentNumber": order_name,
                    "productionType": "ownProduction",
                    "warehouseId": "59739364-7d62-434b-ad13-4617c87a6d13",
                    "expirationType": "milkMoreThan72",
                    "containsUtilisationReport": "true",
                    "usageType": "verified",
                    "cisType": "unit",
                    "fillingMethod": "file",
                    "isAutocompletePositionsDataNeeded": "true",
                    "productsHasSameDates": "true",
                    "isForKegs": "true",
                    "productionDate": prod_date,
                    "expirationDate": exp_date,
                    "batchNumber": batch_num,
                    "TnvedCode": tnved_code
                }
                
                fut = self.intro_executor.submit(self._intro_worker, it, production_patch, thumbprint) # type: ignore
                futures.append((fut, it))

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            def intro_monitor():
                completed = 0
                for fut, it in futures:
                    try:
                        ok, msg = fut.result(timeout=600)  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                        self.after(0, self._on_intro_finished, it, ok, msg)
                        completed += 1
                    except Exception as e:
                        self.after(0, self._on_intro_finished, it, False, f"–¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
                        completed += 1
                
                # –í—Å—ë –∑–∞–≤–µ—Ä—à–µ–Ω–æ - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                self.after(0, lambda: self.intro_btn.configure(state="normal"))
                self.after(0, lambda: self.intro_log_insert(f"‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ({completed}/{len(futures)})"))

            threading.Thread(target=intro_monitor, daemon=True).start()

        except Exception as e:
            self.intro_log_insert(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç: {e}")
            self.intro_btn.configure(state="normal")
    def _intro_worker(self, item: dict, production_patch: dict, thumbprint: str) -> Tuple[bool, str]:
        """
        –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–≤–æ–¥ –≤ –æ–±–æ—Ä–æ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, message).
        """
        document_id = item["document_id"]
        
        try:
            session = SessionManager.get_session()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ api.py
            from api import put_into_circulation
            
            # –í—ã–∑—ã–≤–∞–µ–º API —Ñ—É–Ω–∫—Ü–∏—é
            ok, result = put_into_circulation(
                session=session,
                codes_order_id=document_id,
                production_patch=production_patch,
                organization_id=os.getenv("ORGANIZATION_ID"), # type: ignore
                thumbprint=THUMBPRINT,
                check_poll_interval=10,      # –£–≤–µ–ª–∏—á–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                check_poll_attempts=30,      # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
            )
            
            if ok:
                intro_id = result.get("introduction_id", "Unknown")
                return True, f"–£—Å–ø–µ—à–Ω–æ. Introduction ID: {intro_id}"
            else:
                errors = result.get("errors", [])
                error_msg = "; ".join(errors) if errors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                return False, error_msg
                
        except Exception as e:
            return False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        
    def _on_intro_finished(self, item: dict, ok: bool, msg: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)."""
        try:
            docid = item.get("document_id")
            order_name = item.get("order_name", "Unknown")
            
            if ok:
                self.intro_log_insert(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–≤–æ–¥ –≤ –æ–±–æ—Ä–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                item["status"] = "–í–≤–µ–¥–µ–Ω –≤ –æ–±–æ—Ä–æ—Ç"
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–º–µ—Ç–∫—É
            else:
                self.intro_log_insert(f"‚ùå –û–®–ò–ë–ö–ê: {order_name} (ID: {docid}) - {msg}")
                item["status"] = "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update_introduction_tree()
            self.update_download_tree()  # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
            
        except Exception as e:
            self.intro_log_insert(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    def _setup_introduction_tsd_tab(self):
        """–¢–∞–± –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç (–¢–°–î)"""
        tab_tsd = self.tabview.add("üì± –í–≤–æ–¥ –≤ –æ–±–æ—Ä–æ—Ç (–¢–°–î)")
        self.tsd_tab = tab_tsd
        
        main_frame = ctk.CTkFrame(tab_tsd)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º grid –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏
        main_frame.grid_columnconfigure(0, weight=1)  # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ç–∞–±–ª–∏—Ü–∞ –∏ —Ñ–æ—Ä–º–∞
        main_frame.grid_columnconfigure(1, weight=1)  # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ª–æ–≥
        main_frame.grid_rowconfigure(1, weight=1)     # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º–∞—è
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Ç–∞–±–ª–∏—Ü–∞ –∏ —Ñ–æ—Ä–º–∞
        left_frame = ctk.CTkFrame(main_frame)
        left_frame.grid(row=0, column=0, rowspan=2, sticky="nsew", padx=(0, 5))
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        table_frame = ctk.CTkFrame(left_frame)
        table_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        ctk.CTkLabel(table_frame, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))
        
        tsd_columns = ("order_name", "document_id", "status", "filename")
        self.tsd_tree = ttk.Treeview(table_frame, columns=tsd_columns, show="headings", 
                                height=12, selectmode="extended")
        
        headers = {
            "order_name": "–ó–∞—è–≤–∫–∞", "document_id": "ID –∑–∞–∫–∞–∑–∞",
            "status": "–°—Ç–∞—Ç—É—Å", "filename": "–§–∞–π–ª"
        }
        
        for col, text in headers.items():
            self.tsd_tree.heading(col, text=text)
            self.tsd_tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tsd_tree.yview)
        self.tsd_tree.configure(yscrollcommand=scrollbar.set)
        self.tsd_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        form_frame = ctk.CTkFrame(left_frame)
        form_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(form_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¢–°–î:", 
                    font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", pady=10, columnspan=4)
        
        # –°–µ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        tsd_labels = [
            ("–í–≤–æ–¥ –≤ –æ–±–æ—Ä–æ—Ç ‚Ññ:", "tsd_intro_number_entry"),
            ("–î–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–î–î-–ú–ú-–ì–ì–ì–ì):", "tsd_prod_date_entry"),
            ("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î-–ú–ú-–ì–ì–ì–ì):", "tsd_exp_date_entry"),
            ("–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏:", "tsd_batch_entry")
        ]
        
        for i, (label_text, attr_name) in enumerate(tsd_labels):
            ctk.CTkLabel(form_frame, text=label_text).grid(row=i+1, column=0, sticky="w", pady=8, padx=5)
            entry = ctk.CTkEntry(form_frame, width=200)
            entry.grid(row=i+1, column=1, pady=8, padx=5)
            setattr(self, attr_name, entry)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        today = datetime.now().strftime("%d-%m-%Y")
        future_date = (datetime.now() + timedelta(days=1826)).strftime("%d-%m-%Y")
        self.tsd_prod_date_entry.insert(0, today) # type: ignore
        self.tsd_exp_date_entry.insert(0, future_date) # type: ignore
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        btn_frame = ctk.CTkFrame(left_frame)
        btn_frame.pack(fill="x", pady=(0, 10))
        
        self.tsd_btn = ctk.CTkButton(
            btn_frame, 
            text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¢–°–î", 
            command=self.on_tsd_clicked,
            fg_color="#E67E22",
            hover_color="#D35400"
        )
        self.tsd_btn.pack(side="left", padx=5)
        
        self.tsd_refresh_btn = ctk.CTkButton(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.update_tsd_tree)
        self.tsd_refresh_btn.pack(side="left", padx=5)
        
        self.tsd_clear_btn = ctk.CTkButton(btn_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_tsd_log)
        self.tsd_clear_btn.pack(side="left", padx=5)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ç–æ–ª—å–∫–æ –ª–æ–≥
        right_frame = ctk.CTkFrame(main_frame)
        right_frame.grid(row=0, column=1, rowspan=2, sticky="nsew", padx=(5, 0))
        right_frame.grid_rowconfigure(1, weight=1)  # –õ–æ–≥ –±—É–¥–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è
        right_frame.grid_columnconfigure(0, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–∞
        ctk.CTkLabel(right_frame, text="–õ–æ–≥ –¢–°–î:", 
                    font=ctk.CTkFont(weight="bold")).grid(row=0, column=0, sticky="w", pady=(10, 5), padx=10)

        # –ë–æ–ª—å—à–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∞ - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å
        self.tsd_log_text = ctk.CTkTextbox(right_frame, font=ctk.CTkFont(size=13))
        self.tsd_log_text.grid(row=1, column=0, sticky="nsew", padx=15, pady=(0, 10))
        self.tsd_log_text.configure(state="disabled")
        
        self.update_tsd_tree()

    def clear_tsd_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥ –¢–°–î"""
        try:
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.tsd_log_text.configure(state="normal")
            # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            self.tsd_log_text.delete("1.0", "end")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ"
            self.tsd_log_text.configure(state="disabled")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ª–æ–≥ –æ—á–∏—â–µ–Ω
            self.tsd_log_text.configure(state="normal")
            self.tsd_log_text.insert("end", f"[{datetime.now().strftime('%H:%M:%S')}] –õ–æ–≥ –æ—á–∏—â–µ–Ω\n")
            self.tsd_log_text.configure(state="disabled")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            self.tsd_log_text.see("end")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–∞ –¢–°–î: {e}")

    def _configure_treeview_style(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è —Ç–∞–±–ª–∏—Ü"""
        style = ttk.Style()
        style.theme_use("clam")
        
        # –°—Ç–∏–ª—å –¥–ª—è Treeview
        style.configure("Treeview",
                       background="#2b2b2b",
                       foreground="white",
                       fieldbackground="#2b2b2b",
                       borderwidth=0)
        
        style.configure("Treeview.Heading",
                       background="#3a3a3a",
                       foreground="white",
                       relief="flat",
                       font=('TkDefaultFont', 10, 'bold'))
        
        style.map("Treeview",
                 background=[('selected', '#1f6aa5')],
                 foreground=[('selected', 'white')])
        
        style.map("Treeview.Heading",
                 background=[('active', '#4a4a4a')])

    def tsd_log_insert(self, text: str):
        """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–∞–± '–¢–°–î' (–≤—ã–∑–æ–≤—ã —Ç–æ–ª—å–∫–æ –∏–∑ GUI-–ø–æ—Ç–æ–∫–∞)."""
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        msg = f"{now} - {text}\n"
        try:
            self.tsd_log_text.insert("end", msg)
            self.tsd_log_text.see("end")
        except Exception:
            pass

    def update_tsd_tree(self):
        """–ù–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∑–∞–∫–∞–∑–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö status == '–°–∫–∞—á–∞–Ω' –∏–ª–∏ filename != None, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –¢–°–î"""
        # –û—á–∏—Å—Ç–∏—Ç—å –¥–µ—Ä–µ–≤–æ
        for i in self.tsd_tree.get_children():
            self.tsd_tree.delete(i)
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ self.download_list, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –¢–°–î
        for item in self.download_list:
            document_id = item.get("document_id")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ò –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –Ω–∞ –¢–°–î
            if (item.get("status") in ("–°–∫–∞—á–∞–Ω", "–°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è", "Downloaded", "–û–∂–∏–¥–∞–µ—Ç") or item.get("filename")) and document_id not in self.sent_to_tsd_items:
                vals = (
                    item.get("order_name"), 
                    document_id, 
                    item.get("status"), 
                    item.get("filename") or ""
                )
                self.tsd_tree.insert("", "end", iid=document_id, values=vals)

    def get_selected_tsd_items(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ download_list, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º –≤ tsd_tree."""
        sel = self.tsd_tree.selection()
        selected = []
        id_to_item = {it['document_id']: it for it in self.download_list}
        for iid in sel:
            docid = iid
            it = id_to_item.get(docid)
            if it:
                selected.append(it)
        return selected

    def on_tsd_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ‚Äî —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞–µ—Ç threads –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
        try:
            self.tsd_log_insert("üîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¢–°–î...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            selected_items = self.get_selected_tsd_items()
            self.tsd_log_insert(f"üìã –í—ã–±—Ä–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(selected_items)}")
            
            for item in selected_items:
                self.tsd_log_insert(f"   - {item.get('order_name', 'Unknown')} (ID: {item.get('document_id', 'Unknown')})")
            
            if not selected_items:
                self.tsd_log_insert("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            intro_number = self.tsd_intro_number_entry.get().strip() # type: ignore
            prod_date_raw = self.tsd_prod_date_entry.get().strip() # type: ignore
            exp_date_raw = self.tsd_exp_date_entry.get().strip() # type: ignore
            batch_num = self.tsd_batch_entry.get().strip() # type: ignore
            
            
            self.tsd_log_insert(f"üìÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π: into_num='{intro_number}', prod='{prod_date_raw}', exp='{exp_date_raw}', batch='{batch_num}'")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
            try:
                prod_date = self.convert_date_format(prod_date_raw)
                exp_date = self.convert_date_format(exp_date_raw)
                self.tsd_log_insert(f"üìÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã: prod='{prod_date}', exp='{exp_date}'")
            except Exception as e:
                self.tsd_log_insert(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç: {e}")
                return

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = []
            if not intro_number:
                errors.append("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–≤–æ–¥–∞ –≤ –æ–±–æ—Ä–æ—Ç.")
            if not batch_num:
                errors.append("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏.")
            if not prod_date:
                errors.append("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.")
            if not exp_date:
                errors.append("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏.")

            if errors:
                for error in errors:
                    self.tsd_log_insert(f"‚ùå {error}")
                return

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            self.tsd_btn.configure(state="disabled")
            self.tsd_log_insert("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¢–°–î...")
            self.tsd_log_insert(f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(selected_items)}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
            futures = []
            for it in selected_items:
                try:
                    docid = it["document_id"]
                    self.tsd_log_insert(f"–ù–∞—à–ª–∏ doc_id –¥–ª—è –ø–æ–∏—Å–∫–∞ gtin: {docid}")
                    simpl_name = it.get("simpl", "")
                    full_name = it.get("full_name")

                    
                    self.tsd_log_insert(f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞: {intro_number} (ID: {docid})")
                    
                    # –ü–æ–ª—É—á–∞–µ–º GTIN –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
                    gtin = self._get_gtin_for_order(docid)
                    self.tsd_log_insert(f"   GTIN: {gtin}")
                    
                    if not gtin:
                        self.tsd_log_insert(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω GTIN –¥–ª—è –∑–∞–∫–∞–∑–∞ {intro_number}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º TNVED –∫–æ–¥
                    tnved_code = get_tnved_code(simpl_name)
                    self.tsd_log_insert(f"   TNVED: {tnved_code}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
                    positions_data = [{
                        "name": full_name, 
                        "gtin": f"0{gtin}"
                    }]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º production_patch
                    production_patch = {
                        "documentNumber": intro_number,
                        "productionDate": prod_date,
                        "expirationDate": exp_date,
                        "batchNumber": batch_num,
                        "TnvedCode": tnved_code
                    }
                    
                    self.tsd_log_insert(f"üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è API: {production_patch}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
                    session = SessionManager.get_session()
                    fut = self.intro_tsd_executor.submit(self._tsd_worker, it, positions_data, production_patch, session)
                    futures.append((fut, it))
                    self.tsd_log_insert(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è {intro_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
                    
                except Exception as e:
                    self.tsd_log_insert(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–∫–∞–∑–∞ {it.get('order_name', 'Unknown')}: {e}")
                    import traceback
                    self.tsd_log_insert(f"üîç –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")

            if not futures:
                self.tsd_log_insert("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                self.tsd_btn.configure(state="normal")
                return

            # –°–æ–∑–¥–∞—ë–º –Ω–∏—Ç–∫—É-–æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç–µ–ª—å
            def tsd_monitor():
                try:
                    self.tsd_log_insert("üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
                    completed = 0
                    for fut, it in futures:
                        try:
                            self.tsd_log_insert(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {completed + 1}/{len(futures)}...")
                            ok, result = fut.result(timeout=15)
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if ok:
                                intro_id = result.get('introduction_id', 'unknown')
                                msg = f"–£—Å–ø–µ—Ö: introduction_id = {intro_id}"
                            else:
                                errors = result.get('errors', ['unknown error'])
                                msg = f"–û—à–∏–±–∫–∞: {'; '.join(errors)}"
                            
                            self.after(0, self._on_tsd_finished, it, ok, msg)
                            completed += 1
                            self.tsd_log_insert(f"‚úÖ –ó–∞–¥–∞—á–∞ {completed}/{len(futures)} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {'–£–°–ü–ï–•' if ok else '–û–®–ò–ë–ö–ê'}")
                            
                        except Exception as e:
                            error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}"
                            self.after(0, self._on_tsd_finished, it, False, error_msg)
                            completed += 1
                            self.tsd_log_insert(f"‚ùå –ó–∞–¥–∞—á–∞ {completed}/{len(futures)} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {e}")
                            import traceback
                            self.tsd_log_insert(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                    
                    self.tsd_log_insert(f"üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ({completed}/{len(futures)})")
                    
                except Exception as e:
                    self.tsd_log_insert(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ: {e}")
                    import traceback
                    self.tsd_log_insert(f"üîç –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
                finally:
                    # –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                    self.after(0, lambda: self.tsd_btn.configure(state="normal"))
                    self.after(0, lambda: self.tsd_log_insert("üîì –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            monitor_thread = threading.Thread(target=tsd_monitor, daemon=True)
            monitor_thread.start()
            self.tsd_log_insert("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")

        except Exception as e:
            self.tsd_log_insert(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ on_tsd_clicked: {e}")
            import traceback
            self.tsd_log_insert(f"üîç –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            self.tsd_btn.configure(state="normal")

    def _tsd_worker(self, item: dict, positions_data: List[Dict[str, str]], production_patch: dict, session) -> Tuple[bool, Dict[str, Any]]:
        """
        –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–≤–æ–¥ –≤ –æ–±–æ—Ä–æ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ item.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, result: dict).
        """
        try:
            self.tsd_log_insert(f"üîß –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã _tsd_worker –¥–ª—è {item.get('order_name', 'Unknown')}")

            document_id = item["document_id"]
            self.tsd_log_insert(f"üìÑ Document ID: {document_id}")

            # –í–´–ó–û–í API
            try:
                self.tsd_log_insert("üì° –í—ã–∑–æ–≤ API make_task_on_tsd...")
                
                ok, result = make_task_on_tsd(
                    session=session,
                    codes_order_id=document_id,
                    positions_data=positions_data,
                    production_patch=production_patch,
                )
                self.tsd_log_insert(f"üì° –†–µ–∑—É–ª—å—Ç–∞—Ç API: {'–£–°–ü–ï–•' if ok else '–û–®–ò–ë–ö–ê'}")
                return ok, result
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}"
                self.tsd_log_insert(f"‚ùå {error_msg}")
                import traceback
                self.tsd_log_insert(f"üîç –î–µ—Ç–∞–ª–∏ API –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                return False, {"errors": [error_msg]}
                
        except Exception as e:
            error_msg = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ _tsd_worker: {e}"
            self.tsd_log_insert(f"‚ùå {error_msg}")
            import traceback
            self.tsd_log_insert(f"üîç –î–µ—Ç–∞–ª–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return False, {"errors": [error_msg]}

    def _on_tsd_finished(self, item: dict, ok: bool, msg: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)."""
        docid = item.get("document_id")
        if ok:
            self.tsd_log_insert(f"[OK] {docid} ‚Äî {msg}")
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            self.sent_to_tsd_items.add(docid)
            # –ø–æ–º–µ—Ç–∏–º –∑–∞–∫–∞–∑ –∫–∞–∫ –≤–≤–µ–¥—ë–Ω–Ω—ã–π
            item["status"] = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¢–°–î"
        else:
            self.tsd_log_insert(f"[ERR] {docid} ‚Äî {msg}")
            item["status"] = "–û—à–∏–±–∫–∞ –¢–°–î"
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ sent_to_tsd_items –ø—Ä–∏ –æ—à–∏–±–∫–µ

        # –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        self.update_tsd_tree()
        
    def _get_gtin_for_order(self, document_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç GTIN –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ document_id"""
        try:
            # –ò—â–µ–º –≤ download_list –ø–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            for dl_item in self.download_list:
                if dl_item.get('document_id') == document_id:
                    order_name = dl_item.get('order_name', '')
                    self.tsd_log_insert(f"üîç –ü–æ–∏—Å–∫ –≤ collected –ø–æ order_name: {order_name}")
                    
                    # –ò—â–µ–º –≤ collected –ø–æ order_name
                    for collected_item in self.collected:
                        if getattr(collected_item, 'order_name', '') == order_name:
                            gtin = getattr(collected_item, 'gtin', '')
                            self.tsd_log_insert(f"‚úÖ –ù–∞–π–¥–µ–Ω GTIN –ø–æ order_name: {gtin}")
                            return gtin
            
            self.tsd_log_insert("‚ùå GTIN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ""
        except Exception as e:
            self.tsd_log_insert(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ GTIN –¥–ª—è {document_id}: {e}")
            return ""

if __name__ == "__main__":
    if not os.path.exists(NOMENCLATURE_XLSX):
        logger.error(f"—Ñ–∞–π–ª {NOMENCLATURE_XLSX} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        df = pd.read_excel(NOMENCLATURE_XLSX)
        df.columns = df.columns.str.strip()
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("dark-blue")
        app = App(df)
        app.mainloop()
