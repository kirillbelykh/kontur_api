# updater.py
import os
import sys
import time
import subprocess
import tkinter.messagebox as mbox

def _git_kwargs():
    """kwargs –¥–ª—è subprocess: —Å–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å –Ω–∞ Windows –∏ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç."""
    kwargs = {'text': True}
    if os.name == 'nt':
        si = subprocess.STARTUPINFO()
        si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        si.wShowWindow = 0
        kwargs.update({'startupinfo': si, 'creationflags': getattr(subprocess, 'CREATE_NO_WINDOW', 0)})
    return kwargs

def _run_git(args, repo_dir, check=True):
    return subprocess.run(["git"] + args, cwd=repo_dir, check=check, **_git_kwargs())

def _capture_git(args, repo_dir):
    return subprocess.check_output(["git"] + args, cwd=repo_dir, **_git_kwargs())

def _kill_git_processes():
    try:
        if os.name == 'nt':
            subprocess.run(["taskkill", "/F", "/IM", "git.exe"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            subprocess.run(["pkill", "-f", "git"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception:
        pass

def _ensure_index_lock_removed(repo_dir, attempts=6, delay=0.3):
    lock_path = os.path.join(repo_dir, ".git", "index.lock")
    for _ in range(attempts):
        if os.path.exists(lock_path):
            _kill_git_processes()
            try:
                os.remove(lock_path)
                return
            except PermissionError:
                time.sleep(delay)
                continue
            except FileNotFoundError:
                return
        else:
            return

def _default_pre_cleanup():
    """–í–µ–¥–µ–Ω–∏–µ: –∑–∞–∫—Ä—ã—Ç—å —Ä—É—Ç–∞-–ª–æ–≥–≥–µ—Ä—ã –∏ —Å–æ–±—Ä–∞—Ç—å –º—É—Å–æ—Ä, —á—Ç–æ–±—ã —Ñ–∞–π–ª—ã –º–æ–≥–ª–∏ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã."""
    try:
        import logging, gc
        root = logging.getLogger()
        for h in root.handlers[:]:
            try:
                h.flush()
            except Exception:
                pass
            try:
                h.close()
            except Exception:
                pass
            try:
                root.removeHandler(h)
            except Exception:
                pass
        gc.collect()
    except Exception:
        pass

def check_for_updates(repo_dir=None, pre_update_cleanup=None, auto_restart=True):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç origin/main –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
    repo_dir - –ø–∞–ø–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–∞–ø–∫–∞ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –º–æ–¥—É–ª—å).
    pre_update_cleanup - callable(), –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (–∑–∞–∫—Ä—ã—Ç—å –ª–æ–≥–≥–µ—Ä—ã –∏ —Ç.–ø.)
    auto_restart - –µ—Å–ª–∏ True, –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç os.execl(...) –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–¥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞), False –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å.
    """
    if repo_dir is None:
        repo_dir = os.path.abspath(os.path.dirname(__file__))

    if pre_update_cleanup is None:
        pre_update_cleanup = _default_pre_cleanup

    try:
        _ensure_index_lock_removed(repo_dir)

        # fetch ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º refs
        try:
            _run_git(["fetch", "origin", "--prune"], repo_dir)
        except subprocess.CalledProcessError as e:
            # –µ—Å–ª–∏ fetch —É–ø–∞–ª ‚Äî fallback –∫ ls-remote –¥–∞–ª—å—à–µ
            print("git fetch failed:", e)

        # –ø–æ–ª—É—á–∞–µ–º —Ö–µ—à–∏
        try:
            local_commit = _capture_git(["rev-parse", "HEAD"], repo_dir).strip()
        except subprocess.CalledProcessError:
            mbox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
            return False

        try:
            # prefer origin/main (–ø–æ—Å–ª–µ fetch)
            remote_commit = _capture_git(["rev-parse", "origin/main"], repo_dir).strip()
        except subprocess.CalledProcessError:
            # fallback ‚Äî ls-remote
            try:
                remote_commit = subprocess.check_output(["git", "ls-remote", "origin", "main"], cwd=repo_dir, text=True).split()[0]
            except Exception as e:
                print("ls-remote failed:", e)
                mbox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç.")
                return False

        if local_commit == remote_commit:
            return False  # –∞–∫—Ç—É–∞–ª—å–Ω–æ

        # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ans = mbox.askyesno("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ", "üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å?")
        if not ans:
            return False

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        try:
            pre_update_cleanup()
        except Exception:
            pass
        _ensure_index_lock_removed(repo_dir)

        # –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?
        try:
            status = _capture_git(["status", "--porcelain"], repo_dir)
            has_local_changes = bool(status.strip())
        except Exception:
            has_local_changes = False

        stash_created = False
        if has_local_changes:
            try:
                _run_git(["stash", "push", "-u", "-m", "autostash-before-update"], repo_dir)
                stash_created = True
            except subprocess.CalledProcessError as e:
                mbox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return False

        # –ø—ã—Ç–∞–µ–º—Å—è –±–µ–∑–±–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ (fast-forward)
        try:
            _run_git(["merge", "--ff-only", "origin/main"], repo_dir)
        except subprocess.CalledProcessError:
            # –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reset
            resp = mbox.askyesno(
                "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π",
                "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å fast-forward (–≤–µ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è —Å origin).\n"
                "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (git reset --hard origin/main)?\n\n"
                "–í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ —É–¥–∞–ª–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–µ–∑–∞–ø—É—à–µ–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –≤ –≤–µ—Ç–∫–µ."
            )
            if not resp:
                if stash_created:
                    try:
                        _run_git(["stash", "pop"], repo_dir)
                    except Exception:
                        pass
                return False
            try:
                _run_git(["reset", "--hard", "origin/main"], repo_dir)
            except subprocess.CalledProcessError:
                mbox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                if stash_created:
                    try:
                        _run_git(["stash", "pop"], repo_dir)
                    except Exception:
                        pass
                return False

        # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ stash (–µ—Å–ª–∏ –±—ã–ª)
        if stash_created:
            try:
                _run_git(["stash", "pop"], repo_dir)
            except subprocess.CalledProcessError:
                mbox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤—Ä—É—á–Ω—É—é.")

        mbox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        if auto_restart:
            python = sys.executable
            os.execl(python, python, *sys.argv)

        return True

    except Exception as exc:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", exc)
        mbox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {exc}")
        return False
